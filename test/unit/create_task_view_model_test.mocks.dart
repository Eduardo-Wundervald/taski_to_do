// Mocks generated by Mockito 5.4.4 from annotations
// in taski_to_do/test/unit/create_task_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i5;

import 'package:hive/hive.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:taski_to_do/src/data/model/task.dart' as _i4;
import 'package:taski_to_do/src/presentation/viewmodel/todo_task_view_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoTaskViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoTaskViewModel extends _i1.Mock implements _i3.TodoTaskViewModel {
  MockTodoTaskViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i4.Task> get taskBox => (super.noSuchMethod(
        Invocation.getter(#taskBox),
        returnValue: _FakeBox_0<_i4.Task>(
          this,
          Invocation.getter(#taskBox),
        ),
      ) as _i2.Box<_i4.Task>);

  @override
  Map<int, _i4.Task> get uncompletedTasks => (super.noSuchMethod(
        Invocation.getter(#uncompletedTasks),
        returnValue: <int, _i4.Task>{},
      ) as Map<int, _i4.Task>);

  @override
  int get uncompletedTasksCount => (super.noSuchMethod(
        Invocation.getter(#uncompletedTasksCount),
        returnValue: 0,
      ) as int);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void toggleTaskDone(int? key) => super.noSuchMethod(
        Invocation.method(
          #toggleTaskDone,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyTasksUpdated() => super.noSuchMethod(
        Invocation.method(
          #notifyTasksUpdated,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
